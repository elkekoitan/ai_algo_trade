"""
Stealth Executor
Gizli emir y√ºr√ºtme sistemi
"""

import asyncio
import logging
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import uuid

from .models import StealthOrder

logger = logging.getLogger(__name__)

class StealthExecutor:
    """
    Gizli ve tespit edilmesi zor emir y√ºr√ºtme sistemi
    """
    
    def __init__(self):
        self.is_active = False
        self.active_orders = []
        self.execution_algorithms = {}
        
        logger.info("ü•∑ Stealth Executor initialized")
    
    async def start_execution_engine(self):
        """Gizli y√ºr√ºtme motorunu ba≈ülat"""
        try:
            logger.info("üîç Starting stealth execution engine...")
            
            await self._initialize_execution_algorithms()
            
            self.is_active = True
            logger.info("‚úÖ Stealth execution engine active")
            
        except Exception as e:
            logger.error(f"Stealth execution start error: {str(e)}")
            raise
    
    async def _initialize_execution_algorithms(self):
        """Y√ºr√ºtme algoritmalarƒ±nƒ± ba≈ülat"""
        try:
            self.execution_algorithms = {
                'iceberg_slicer': {
                    'min_slice_ratio': 0.05,
                    'max_slice_ratio': 0.20,
                    'randomization': True
                },
                'time_weighted_slicer': {
                    'base_interval': 60,
                    'randomization_factor': 0.5
                }
            }
            
            logger.info("üß† Execution algorithms initialized")
            
        except Exception as e:
            logger.error(f"Algorithm initialization error: {str(e)}")
            raise
    
    async def create_stealth_order(
        self, 
        symbol: str, 
        side: str, 
        total_quantity: float,
        stealth_level: int = 5
    ) -> Optional[StealthOrder]:
        """Gizli emir olu≈ütur"""
        try:
            if not self.is_active:
                return None
            
            slice_size = total_quantity * 0.1  # 10% slices
            interval = 120 * stealth_level // 5  # Variable interval
            
            stealth_order = StealthOrder(
                order_id=str(uuid.uuid4()),
                symbol=symbol,
                side=side,
                total_quantity=total_quantity,
                executed_quantity=0.0,
                remaining_quantity=total_quantity,
                slice_size=slice_size,
                slice_interval=interval,
                stealth_level=stealth_level,
                anti_detection_enabled=stealth_level >= 7,
                randomization_factor=min(stealth_level / 10, 0.8),
                created_at=datetime.now(),
                status="PENDING"
            )
            
            self.active_orders.append(stealth_order)
            
            logger.info(f"ü•∑ Stealth order created: {symbol} - {side} - {total_quantity}")
            return stealth_order
            
        except Exception as e:
            logger.error(f"Stealth order creation error: {str(e)}")
            return None
    
    async def get_active_stealth_orders(self) -> List[Dict]:
        """Aktif gizli emirleri d√∂nd√ºr"""
        try:
            active_orders = []
            
            for order in self.active_orders:
                if order.status in ["PENDING", "EXECUTING"]:
                    progress = (order.executed_quantity / order.total_quantity) * 100
                    
                    active_orders.append({
                        'order_id': order.order_id,
                        'symbol': order.symbol,
                        'side': order.side,
                        'total_quantity': order.total_quantity,
                        'executed_quantity': order.executed_quantity,
                        'remaining_quantity': order.remaining_quantity,
                        'progress_percentage': progress,
                        'stealth_level': order.stealth_level,
                        'status': order.status,
                        'created_at': order.created_at.isoformat()
                    })
            
            return active_orders
            
        except Exception as e:
            logger.error(f"Get active orders error: {str(e)}")
            return []
    
    def get_status(self) -> Dict:
        """Executor durumunu d√∂nd√ºr"""
        return {
            'is_active': self.is_active,
            'active_orders': len([o for o in self.active_orders if o.status in ["PENDING", "EXECUTING"]]),
            'total_orders': len(self.active_orders)
        } 